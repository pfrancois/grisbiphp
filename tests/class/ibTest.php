<?php
// $Id: ibTest.php 33 2010-08-22 22:54:52Z pfrancois $
require_once 'PHPUnit/Framework.php';
require_once 'G:\zmws\_web.zmwsc\comptes\class\loader.php';

/**
 * Test class for ib.
 * Generated by PHPUnit on 2010-05-31 at 13:41:10.

 */
class ibTest extends PHPUnit_Framework_TestCase{
	/**
	 * @var ib
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		global $gsb_xml;
		global $gsb_ibs;
		//on prend le fichier de test et on remplace avec celui actuel
		copy('G:/zmws/_web.zmwsc/comptes/tests/fichiers/test_original.gsb','test.gsb');
		$gsb_xml=new xml('test.gsb');
		$gsb_xml->reload();
	//on prend le fichier de test et on remplace avec celui actuel
		$this->object=$gsb_ibs->get_by_id(1);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown(){
		@unlink('test.gsb');
	}


	public function testGet_id() {
		$this->assertEquals(1, $this->object->get_id());
	}

	public function testGet_nom() {
		$this->assertEquals("imputation_credit", $this->object->get_nom());
	}


	public function testSet_nom() {
		$this->object->set_nom('ceci est un test');
		$this->assertEquals('ceci est un test',$this->object->get_nom());
	}
	public function test_get_type(){
		$this->assertEquals(ib::CREDIT, $this->object->get_type());
	}

	public function test_get_type2(){
		global $gsb_ibs;
		$this->assertEquals(ib::DEBIT, $gsb_ibs->get_by_id(2)->get_type());
	}
	public function test_get_type3(){
		global $gsb_ibs;
		$this->assertEquals(ib::SPECIAL, $gsb_ibs->get_by_id(4)->get_type());
	}
	public function test_set_type(){
		$this->object->set_type(ib::DEBIT);
		$this->assertEquals(ib::DEBIT, $this->object->get_type());
	}
	public function test_set_type_invalide(){
		$this->setExpectedException('exception_parametre_invalide');
		$this->object->set_type('ceci est un test');
	}
	public function test_set_type_invalide2(){
		$this->setExpectedException('exception_parametre_invalide');
		$this->object->set_type(4);
	}
	public function test_get_next_sub(){
		$this->assertEquals(1,$this->object->get_next_sub());
	}
	public function test_has_sub(){
		$this->assertEquals(false,$this->object->has_sub());
	}
	public function test_count(){
		global $gsb_ibs;
		$this->assertEquals(1,count($gsb_ibs->get_by_id(2)));
	}
	public function test_has_sub2(){
		global $gsb_ibs;
		$this->assertEquals(true,$gsb_ibs->get_by_id(2)->has_sub());
	}
	public function testiter_sub(){
		global $gsb_ibs;
		$x=$gsb_ibs->get_by_id(2)->iter_sub();
		foreach ($x as $y){
			$this->assertType('sib',$y);
		}
		$this->assertEquals(1,count($x));
	}
		/**
	 * test afin de voir si en lui donnant un id de compte inexistant il renvoit bien une exception
	 * @expectedException exception_not_exist
	 */
	public function testGet_sub_by_id_id_inexistant()	{
		global $gsb_ibs;
		$r=$gsb_ibs->get_by_id(2)->get_sub_by_id(235400);
	}

	/**
	 * test afin de voir si je peux recuperer le numero du compte inexistant
	 */
	public function testGet_sub_by_id_id_inexistant_recup_numero_cpt()	{
		global $gsb_ibs;
		try{
			$r=$gsb_ibs->get_by_id(2)->get_sub_by_id(235400);
		}catch (exception_not_exist $e) {
			$this->assertEquals(235400,$e->id);
		}
	}
	/**
	 * test afin de voir si en lui donnant une valeur incorrect (une chaine au lieu d'un chiffre) il renvoit bien une exception
	* @expectedException exception_parametre_invalide
	 */
	public function testGet_sub_by_id_var_incorrect()	{
		global $gsb_ibs;
		$r=$gsb_ibs->get_by_id(2)->get_sub_by_id('toto');
	}	/**
	 * test afin de voir si on recoit bien le numero
	 */
	public function testGet_sub_by_id()	{
		global $gsb_ibs;
		$r=$gsb_ibs->get_by_id(2)->get_sub_by_id(1);
		$this->assertType('sib',$r);
		$this->assertEquals(1,$r->get_id());

	}
	/**
	 * test afin de voir si on recoit bien le numero si on connait le nom
	 */
	public function testGet_sub_by_name()	{
		global $gsb_ibs;
		$r=$gsb_ibs->get_by_id(2)->Get_sub_by_name('sous_imputation');
		$this->assertEquals('sous_imputation',$r->get_nom());
	}
	/**
	 * test afin de voir si en lui donnant un nom de compte inexistant il renvoit bien une exception
	 */
	public function testGet_sub_by_name_name_inexistant()	{
		global $gsb_ibs;
		$this->setExpectedException('exception_not_exist');
		$r=$gsb_ibs->get_by_id(2)->Get_sub_by_name('toto');
	}

	/**
	*test afin de verifier la possiblité d'effacer une ib. renvoi exception
	*/
	public function testDelete_integrite(){
		global $gsb_ibs;
		$this->setExpectedException('exception_integrite_referentielle');
		$this->object->delete();
	}
	/**
	 * test afin de verifier la possibilité d'effacer
	 */
	public function testDelete(){
		global $gsb_ibs;
		$gsb_ibs->get_by_id(4)->delete();
		$this->assertEquals(3,count($gsb_ibs));
		$this->assertEquals(4,$gsb_ibs->get_next());
		$this->setExpectedException('Exception_no_reponse');
		$gsb_ibs->get_by_id(4);
	}
}
