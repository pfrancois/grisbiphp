<?php  /* coding: utf-8 */ 

require_once 'PHPUnit/Framework.php';
require_once 'G:\zmws\_web.zmwsc\comptes\class\loader.php';

/**
 * Test class for moyen.
 * Generated by PHPUnit on 2010-07-14 at 19:15:22.
 */
class moyenTest extends PHPUnit_Framework_TestCase{
	/**
	 * @var scat
	 */
	protected $object;
	protected $xml;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		global $gsb_xml;
		global $gsb_comptes;
		//on prend le fichier de test et on remplace avec celui actuel
		copy('G:/zmws/_web.zmwsc/comptes/tests/fichiers/test_original.gsb','test.gsb');
		$gsb_xml=new xml('test.gsb');
		$gsb_xml->reload();
		$this->object=$gsb_comptes->get_by_id(0)->get_moyen_by_id(1);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown(){
		@unlink('test.gsb');
	}


	public function testGet_mere(){
		$c=$this->object->get_mere();
		$this->assertEquals(0,$c->get_id());
		$this->assertType('compte',$c);
	}
	public function test_get_id(){
		$this->assertEquals(1,$this->object->get_id());
	}
	public function test_get_nom(){
		$this->assertEquals("Virement",$this->object->get_nom());
	}
	public function testSet_nom(){
		$this->object->set_nom("test");
		$this->assertEquals("test",$this->object->get_nom());
	}
	public function testSet_nom2(){
		$this->setExpectedException('exception_parametre_invalide');
		$this->object->set_nom("");
	}

	public function testGet_signe(){
		$this->assertEquals(moyen::NEUTRE,$this->object->get_signe());
	}
	public function testGet_signe2(){
		global $gsb_comptes;
		$this->assertEquals(moyen::CREDIT,$gsb_comptes->get_by_id(0)->get_moyen_by_id(2)->get_signe());
	}
	public function testGet_signe3(){
		global $gsb_comptes;
		$this->assertEquals(moyen::DEBIT,$gsb_comptes->get_by_id(0)->get_moyen_by_id(3)->get_signe());
	}

	public function testSet_signe(){
		$this->object->set_signe(moyen::CREDIT);
		$this->assertEquals(moyen::CREDIT,$this->object->get_signe());
	}
	public function testSet_signe2(){
		$this->setExpectedException('exception_parametre_invalide');
		$this->object->set_signe("253");
	}
	public function testHas_entree_compl(){
		$this->assertEquals(true,$this->object->has_entree_compl());
		$this->assertEquals(false,$this->object->get_mere()->get_moyen_by_id(2)->has_entree_compl());
	}

	public function testHas_numerotation_auto(){
		$this->assertEquals(false,$this->object->has_numerotation_auto());
		$this->assertEquals(true,$this->object->get_mere()->get_moyen_by_id(5)->has_numerotation_auto());
	}

	public function testSet_numerotation_auto(){
		$this->object->set_numerotation_auto(false);
		$this->assertEquals(false,$this->object->has_numerotation_auto());
	}
	public function testSet_numerotation_auto2(){
		$this->object->set_numerotation_auto(true);
		$this->assertEquals(true,$this->object->has_numerotation_auto());
	}
	public function testSet_numerotation_auto3(){
		$this->setExpectedException('exception_parametre_invalide');
		$this->object->set_numerotation_auto('toto');
	}
	public function testget_entree_comp(){
		$this->assertEquals(0,$this->object->get_entree_comp());
		$this->assertEquals(12345,$this->object->get_mere()->get_moyen_by_id(5)->get_entree_comp());
	}

	public function testset_entree_comp(){
		$this->object->set_entree_comp(12345);
		$this->assertEquals(12345,$this->object->get_entree_comp());
		$this->assertEquals(true,$this->object->has_entree_compl());
	}
	public function testefface_entree_comp(){
		$this->object->efface_entree_comp();
		$this->assertEquals(false,$this->object->has_entree_compl());
		$this->assertEquals("",$this->object->get_entree_comp());
	}
}