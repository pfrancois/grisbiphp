<?php  /* coding: utf-8 */ 

require_once 'PHPUnit/Framework.php';
require_once 'G:\zmws\_web.zmwsc\comptes\class\loader.php' ;

/**
 * Test class for xml.
 * Generated by PHPUnit on 2010-04-25 at 21:52:45.
 */
class xmlTest extends PHPUnit_Framework_TestCase {
    /**
     * @var xml
     */
    protected $object ;
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        //on prend le fichier de test et on remplace avec celui actuel
        copy('G:/zmws/_web.zmwsc/comptes/tests/fichiers/test_original.gsb', 'test.gsb') ;
    }
    protected function tearDown() {
        @unlink('test.gsb') ;
    }

    public function testGet_nom_de_fichier_inconnu() {
        $this->setExpectedException('InvalidArgumentException') ;
        $fichier_xml = new xml('ceciestunfichierinconnu.gsb') ;
    }
    public function testsur_free() {
        $fichier_xml = new xml('test.gsb', true) ;
    }

    public function testGet_fichier_invalide() {
        $this->setExpectedException('UnexpectedValueException') ;
        $fichier_xml = new xml('G:/zmws/_web.zmwsc/comptes/tests/fichiers/test_mauvaise_version.gsb') ;
    }

    public function testGet_changement_de_fichier() {
        $fichier_xml = new xml('G:/zmws/_web.zmwsc/comptes/tests/fichiers/test_original.gsb') ;
        $fichier_xml = new xml('test.gsb') ;
        $this->assertTrue($fichier_xml instanceof xml) ;
        $this->assertTrue($fichier_xml->get_xmlfile() == 'test.gsb') ;
    }

    public function testGet_fichier_normal() {
        $fichier_xml = new xml('test.gsb') ;
        $this->assertTrue($fichier_xml instanceof xml) ;
    }

    /**
     * verifie que xpth_iter nous renvoie bien un tableau qui contient 11 SimpleXMLElement
     */
    public function testXpath_iter_normal() {
        $f = new xml('test.gsb') ;
        $r = $f->xpath_iter("//Compte") ;
        //on verifie que c'est bien un tableau
        $this->assertType('array', $r) ;
        //on verifie qu'il y a bien nos 11 comptes
        $this->assertEquals(7, count($r)) ;
        foreach ($r as $x) {
            $this->assertType('SimpleXMLElement', $x) ;
        }
    }
    /**
     * @depends testGet_fichier_normal
     * @expectedException Exception_no_reponse
     */
    public function testXpath_iter_no_reponse() {
        $f = new xml('test.gsb') ;
        $r = $f->xpath_iter("//ceciestunegrandeinconnu") ;
    }

    /**
     *on demande le numero du compte 0. donc ca doit donner int(0)
     * @depends testGet_fichier_normal
     */
    public function testXpath_reponse_normal() {
        $f = new xml('test.gsb') ;
        $r = $f->xpath_uniq("//Compte/Details/No_de_compte[.='0']") ;
        $this->assertEquals(0, (int)$r) ;
    }
    /**
     *on demande le numero du compte 0. donc ca doit donner int(0)
     * @depends testGet_fichier_normal
     * @expectedException Exception_no_reponse
     */
    public function testXpath_non_existant() {
        $f = new xml('test.gsb') ;
        $r = $f->xpath_uniq("//ceciestunegrandeinconnu") ;
    }

    /**
     *on demande la liste des comptes mais c'est pas possible avec xpath_uniq
     * il faut utiliser xpath_iter
     * @depends testGet_fichier_normal
     * @expectedException Exception_many_reponse
     */
    public function testXpath_renvoi_reponse_multiple() {
        $f = new xml('test.gsb') ;
        $r = $f->xpath_uniq("//Compte") ;
    }
    /**
     * @depends testGet_fichier_normal
     * verifie que l'on peut sauvegarder dans un autre nom
     */
    public function testSave() {
        $f = new xml('test.gsb') ;
        $f->save() ;
        $this->assertFileEquals('G:/zmws/_web.zmwsc/comptes/tests/fichiers/test_original.gsb',
            'test.gsb') ;
    }
    /**
     * @depends testGet_fichier_normal
     * verifie que l'on peut sauvegarder dans un autre nom
     */
    public function testSave_nom_change() {
        $f = new xml('test.gsb') ;
        $f->save('test_reussi.gsb') ;
        $this->assertFileExists('test_reussi.gsb') ;
        $this->assertFileEquals('G:\zmws\_web.zmwsc\comptes\tests\fichiers\test_original.gsb',
            'test_reussi.gsb') ;
        unlink('test_reussi.gsb') ;
    }
    /**
     * verifie que le nom du fichier est bien celui attendu
     *
     * @depends testGet_fichier_normal
     */
    public function testget_xmlfile() {
        $f = new xml('test.gsb') ;
        $this->assertEquals('test.gsb', (string )$f->get_xmlfile()) ;
    }
    public function test_reload() {
        $f = new xml('test.gsb') ;
        $f->get_xml()->Generalites->Titre = 'ceci est faux' ;
        $f->reload() ;
        $this->assertEquals('tiitre du fichier', (string )$f->get_xml()->Generalites->Titre) ;
    }
    public function test_iter_class_faux() {
        $f = new xml('test.gsb') ;
        $this->assertEquals(array(), $f->iter_class('toto', 'operation')) ;
    }
}

?>