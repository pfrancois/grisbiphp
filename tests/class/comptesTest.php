<?php /* coding: utf-8 */ 

require_once 'PHPUnit/Framework.php';
require_once 'G:\zmws\_web.zmwsc\comptes\class\loader.php';
/**
 * Test class for comptes.
 * Generated by PHPUnit on 2010-04-26 at 21:08:16.
 */
class comptesTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var comptes
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()	{
		global $gsb_xml;
		global $gsb_comptes;
		//on prend le fichier de test et on remplace avec celui actuel
		copy('G:/zmws/_web.zmwsc/comptes/tests/fichiers/test_original.gsb','test.gsb');
		$gsb_xml=new xml('test.gsb');
		$gsb_xml->reload();
		$this->object = $gsb_comptes;
	}
	protected function tearDown(){
		@unlink('test.gsb');
	}
	/**
	 * test afin de voir si on recoit bien le compte que l'on veut
	 */
	public function testGet_by_id()	{
		$r=$this->object->get_by_id(0);
		$this->assertType('compte',$r);
		$this->assertEquals(0,$r->get_id());
	}
	/**
	 * test afin de voir si en lui donnant un id de compte inexistant il renvoit bien une exception
	 * @expectedException exception_not_exist
	 */
	public function testGet_by_id_id_inexistant()	{
		$this->object->get_by_id(235400);
	}

	/**
	 * test afin de voir si je peux recuperer le numero du compte inexistant
	 */
	public function testGet_by_id_id_inexistant_recup_numero_cpt()	{
		try{
			$this->object->get_by_id(235400);
		}catch (exception_not_exist $e) {
			$this->assertEquals(235400,$e->id);
		}
	}
	/**
	 * test afin de voir si en lui donnant une valeur incorrect (une chaine au lieur d'un chiffre) il renvoit bien une exception
	* @expectedException exception_parametre_invalide
	 */
	public function testGet_by_id_var_incorrect()	{
		$this->object->get_by_id('toto');
	}

	/**
	 * test afin de voir si on recoit bien le numero si on connait le nom
	 */
	public function testGet_id_by_name()	{
		$r=$this->object->Get_id_by_name('compte bancaire ouvert');
		$this->assertEquals(0,$r);
	}
	/**
	 * test afin de voir si en lui donnant un nom de compte inexistant il renvoit bien une exception
	 * @expectedException exception_not_exist
	 */
	public function testGet_id_by_name_name_inexistant()	{
		$this->object->Get_id_by_name('toto');
	}

	/**
	 * test afin de voir si je peux recuperer le nom du compte inexistant
	 */
	public function testGet_id_by_name_name_inexistant_recup_numero_cpt()	{
		try{
			$this->object->Get_id_by_name('toto');
		}catch (exception_not_exist $e) {
			$this->assertEquals('toto',$e->id);
		}
	}

	public function testGet_next()	{
		$r=$this->object->get_next();
		$this->assertEquals(7,$r);
	}

	/**
	* verifie que l'implementation de count marche,attention, souvent on commence a 0
	*/
	public function test_count(){
		$this->assertEquals(7,count($this->object));
	}

	/**
	* verifie que le compte courant est bien renvoye
	*/
	public function testGet_compte_courant()	{
		$this->assertEquals(0,$this->object->get_compte_courant());
	}

	/**
	* verifie que on peut bien modifier le compte courant
	*/
	public function testSet_compte_courant()	{
		$this->object->set_compte_courant(1);
		$this->assertEquals(1,$this->object->get_compte_courant());
	}

	/**
	* teste que si on met un id inexistant, cela renvoit une erreur
	 * @expectedException exception_not_exist
	 */
	public function testSet_compte_courant_id_inexistant()	{
		$this->object->set_compte_courant(235400);
	}

	/**
	* teste que si on met un id inexistant, cela renvoit une erreur
	 * @expectedException exception_parametre_invalide
	 */
	public function testSet_compte_courant_id_invalide()	{
		$this->object->set_compte_courant('toto');
	}
	/**
	* test que ca nous renvoit un iter comme on veut
	*/
	public function testiter_comptes(){
		$x=$this->object->iter();
		foreach ($x as $y){
			$this->assertType('compte',$y);
		}
		$this->assertEquals(4,count($x));
	}
    public function testiter_compte_modification_type(){
		$x=$this->object->iter(array(compte::T_PASSIF,compte::T_ACTIF,compte::T_BANCAIRE,compte::T_ESPECE));
		foreach ($x as $y){
			$this->assertType('compte',$y);
		}
		$this->assertEquals(7,count($x));
	}
    public function testcount(){
        $this->assertEquals(7,count($this->object));
    }
}