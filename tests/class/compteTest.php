<?php /* coding: utf-8 */

require_once 'PHPUnit/Framework.php';
require_once 'G:\zmws\_web.zmwsc\comptes\class\loader.php';

/**
 * Test class for compte.
 * Generated by PHPUnit on 2010-05-30 at 13:41:31.
 */
class compteTest extends PHPUnit_Framework_TestCase{
	/**
	 * @var compte
	 */
	protected $object;
	protected $xml;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		global $gsb_xml;
		global $gsb_comptes;
		//on prend le fichier de test et on remplace avec celui actuel
		copy('G:/zmws/_web.zmwsc/comptes/tests/fichiers/test_original.gsb','test.gsb');
		$gsb_xml=new xml('test.gsb');
		$gsb_xml->reload();
		$this->object=$gsb_comptes->get_by_id(0);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown(){
		@unlink('test.gsb');
	}

	/**
	 * Generated from @assert () == 'compte bancaire ouvert'.
	 */
	public function testGet_nom() {
		$this->assertEquals('compte bancaire ouvert', $this->object->get_nom());
	}

	/**
	 * Generated from @assert () == 0.
	 */
	public function testGet_id() {
		$this->assertEquals(0, $this->object->get_id());
	}

	/**
	 * Generated from @assert () == 9.
	 */
	public function testGet_nb_ope() {
		$this->assertEquals(9, $this->object->get_nb_ope());
	}

	/**
	 * Generated from @assert () == -10092.
	 */
	public function testGet_solde_courant() {
		$this->assertEquals(-10092, $this->object->get_solde_courant());
	}

	/**
	 * Generated from @assert () == false.
	 */
	public function testIs_cloture() {
		$this->assertEquals(false, $this->object->is_cloture());
	}
	public function testIs_cloture2() {
		global $gsb_comptes;
		$this->assertEquals(true, $gsb_comptes->get_by_id(1)->is_cloture());
	}
	public function testGet_devise() {
		$this->assertType('devise', $this->object->get_devise());
		$this->assertEquals(1,$this->object->get_devise()->get_id());
	}


	public function testGet_type_compte_bancaire() {
		global $gsb_comptes;
		$this->assertEquals(compte::T_BANCAIRE, $gsb_comptes->get_by_id(1)->get_type_compte());
	}

	public function testGet_type_compte_espece() {
		global $gsb_comptes;
		$this->assertEquals(compte::T_ESPECE, $gsb_comptes->get_by_id(2)->get_type_compte());
	}

	public function testGet_type_compte_actif() {
		global $gsb_comptes;
		$this->assertEquals(compte::T_ACTIF, $gsb_comptes->get_by_id(5)->get_type_compte());
	}

	public function testGet_type_compte_passif() {
		global $gsb_comptes;
		$this->assertEquals(compte::T_PASSIF, $gsb_comptes->get_by_id(4)->get_type_compte());
	}

	public function testGet_next_moyen(){
		$this->assertEquals(6, $this->object->get_next_moyen());
	}

	public function testGet_moyen_by_id() {
		$this->assertType('moyen', $this->object->get_moyen_by_id(2));
		$this->assertEquals(2,$this->object->get_moyen_by_id(2)->get_id());
	}

	/**
	 * @expectedException Exception_no_reponse
	 */
	public function testGet_moyen_by_id_inconnu() {
		$this->object->get_moyen_by_id(39);
	}

	public function testGet_moyen_by_name() {
		$this->assertEquals(1, $this->object->get_moyen_by_name("Virement")->get_id());
	}

	public function testget_moyen_debit_defaut(){
		$this->assertEquals(3, $this->object->get_moyen_debit_defaut()->get_id());
	}

	public function testget_moyen_credit_defaut(){
		$this->assertEquals(2, $this->object->get_moyen_credit_defaut()->get_id());
	}

	public function testSet_nom() {
		$this->object->set_nom('toto');
		$this->assertEquals('toto', $this->object->get_nom());
	}

	/**
	 * @expectedException exception_index
	 */
	public function testSet_nom2() {
		$this->object->set_nom('caisse');
	}

	/**
	 * @expectedException exception_parametre_invalide
	 */
	public function testSet_nom3() {
		$this->object->set_nom('');
	}

	public function testSet_cloture() {
		$this->object->set_cloture();
		$this->assertEquals(true, $this->object->is_cloture());
	}

	public function testSet_non_cloture() {
		$this->object->set_non_cloture();
		$this->assertEquals(false, $this->object->is_cloture());
	}


	public function testSet_solde_courant() {
		$this->object->set_solde_courant(300);
		$this->assertEquals(300, $this->object->get_solde_courant());
	}

	/**
	 * @expectedException exception_parametre_invalide
	 */
	public function testSet_solde_courant2() {
		$this->object->set_solde_courant('nom');
	}

	public function testNew_operation_sans_id() {
		$this->assertEquals(15, $this->object->new_operation()->get_id());
	}

	public function testNew_operation_avec_id() {
		$this->assertEquals(30000, $this->object->new_operation(30000)->get_id());
	}

	/**
	 * @expectedException exception_index
	 */
	public function testNew_operation_avec_id_mais_integrite_referentielle() {
		$this->object->new_operation(1);
	}

	public function testIter_operations()
	{
		$x=$this->object->iter_operations();
		foreach ($x as $y){
			$this->assertType('operation',$y);
		}
		$this->assertEquals(9,count($x));
	}

	public function testIter_moyens()
	{
		$x=$this->object->iter_moyens();
		foreach ($x as $y){
			$this->assertType('moyen',$y);
		}
		$this->assertEquals(5,count($x));

	}

}
